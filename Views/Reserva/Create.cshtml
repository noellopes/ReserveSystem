@* CreateReservation.cshtml *@
@model ReserveSystem.Models.ReservaModel

@{
    ViewData["Title"] = "Adicionar Nova Reserva";
}

<h1 class="text-center my-4">Adicionar Nova Reserva</h1>

<div class="container my-8">
    <form asp-action="Create" method="post">
        @Html.AntiForgeryToken()

        <!-- Dropdown de Clientes -->
        <div class="form-group">
            <label for="ClientId" class="control-label">Cliente</label>
            <select asp-for="ClientId" class="form-control"
                    asp-items="@(new SelectList(ViewData["Clients"] as List<ReserveSystem.Models.ClientModel>, "Id", "Name"))">
                <option value="">Selecione um Cliente</option>
            </select>
            <span asp-validation-for="ClientId" class="text-danger"></span>
        </div>

        <!-- Dropdown de Especialidades de Treino -->
        <div class="form-group">
            <label for="Specialty" class="control-label">Especialidade de Treino</label>
            <select id="Specialty" class="form-control" onchange="loadPersonalTrainersBySpecialty()">
                <option value="">Selecione uma Especialidade</option>
                <option value="MUSCLE">Musculação</option>
                <option value="YOGA">Yoga</option>
                <option value="CROSSFIT">Crossfit</option>
            </select>
            <span class="text-danger" id="specialtyError"></span>
        </div>

        <!-- Section para Personal Trainers -->
        <section id="personalTrainersSection" style="display: none; max-height: 500px; overflow-y: auto; margin-top: 20px;">
            <div id="personalTrainersCards" class="d-flex flex-wrap gap-3"></div>
            <p id="noPersonalTrainers" style="display: none;" class="text-center text-muted">Ops, não temos nenhum Personal Trainer com essa especialidade de momento.</p>
        </section>

        <!-- Dropdown de Espaço -->
        <div class="form-group">
            <label for="SpaceId" class="control-label">Espaço</label>
            <select asp-for="SpaceId" class="form-control" onchange="updateSpaceDetails()"
                    asp-items="@(new SelectList(ViewData["Spaces"] as List<ReserveSystem.Models.SpaceModel>, "Id", "Name"))">
                <option value="">-- Selecione um Espaço --</option>
            </select>
            <span asp-validation-for="SpaceId" class="text-danger"></span>
        </div>

        <!-- Campo de Dia da Reserva -->
        <div class="form-group">
            <label for="ReservationDate" class="control-label">Dia da Reserva</label>
            <input id="ReservationDate" name="ReservationDate" type="text" class="form-control date-picker" onchange="updateSpaceDetails()" />
            <span asp-validation-for="ReservationDate" class="text-danger"></span>
        </div>

        <!-- Detalhes do Espaço e Horário -->
        <section id="spaceDetails" style="display: none; margin-top: 20px; margin-bottom: 40px">
            <h1 id="spaceName"></h1>
            <p id="spaceHours"></p>
            <div id="timeInputs" class="flex" style="display: flex; gap: 10px; justify-content: space-between;">
                <div class="form-group">
                    <label for="StartTime" class="control-label">Horário de Início</label>
                    <input id="StartTime" name="StartTime" type="text" class="form-control" />
                    <span asp-validation-for="StartTime" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label for="EndTime" class="control-label">Horário de Término</label>
                    <input id="EndTime" name="EndTime" type="text" class="form-control" />
                    <span asp-validation-for="EndTime" class="text-danger"></span>
                </div>
            </div>
        </section>

        <!-- Botão de Submissão -->
        <button type="submit" class="btn btn-success">Salvar</button>
    </form>

    @section Scripts {
        @{
            await Html.RenderPartialAsync("_ValidationScriptsPartial");
        }
        <script>
            document.addEventListener('DOMContentLoaded', function () {
                flatpickr('#ReservationDate', {
                    dateFormat: "Y-m-d",
                    minDate: "today"
                });
                flatpickr('#StartTime', { enableTime: true, noCalendar: true, dateFormat: "H:i", time_24hr: true });
                flatpickr('#EndTime', { enableTime: true, noCalendar: true, dateFormat: "H:i", time_24hr: true });
            });

            function loadPersonalTrainersBySpecialty() {
                const specialty = document.querySelector('#Specialty').value;
                const section = document.getElementById('personalTrainersSection');
                const cardsContainer = document.getElementById('personalTrainersCards');
                const noPTMessage = document.getElementById('noPersonalTrainers');

                if (!specialty) {
                    section.style.display = 'none';
                    cardsContainer.innerHTML = '';
                    noPTMessage.style.display = 'none';
                    return;
                }

                fetch(`/Reserva/GetPersonalTrainersBySpecialty?specialties=${specialty}`)
                    .then(response => response.json())
                    .then(data => {
                        cardsContainer.innerHTML = '';
                        if (data && Array.isArray(data) && data.length > 0) {
                            noPTMessage.style.display = 'none';
                            data.forEach(pt => {
                                const card = document.createElement('div');
                                card.className = 'card personal-trainer-card';
                                card.style = 'width: 18rem; padding: 15px; border: 1px solid #ccc; border-radius: 8px; box-shadow: 2px 2px 8px rgba(0, 0, 0, 0.1);';
                                card.innerHTML = `
                                                <label style="cursor: pointer; display: block;">
                                                    <input type="radio" name="SelectedPersonalTrainerId" value="${pt.id}" style="display: none;" onchange="highlightSelectedCard(this)" />
                                                    <div>
                                                        <h5>${pt.name}</h5>
                                                        <p>Email: ${pt.email}</p>
                                                        <p>Especialidades: ${pt.specialties.join(', ')}</p>
                                                    </div>
                                                </label>
                                            `;
                                cardsContainer.appendChild(card);
                            });
                        } else {
                            noPTMessage.style.display = 'block';
                        }
                        section.style.display = 'block';
                    })
                    .catch(error => {
                        console.error("Erro ao buscar os Personal Trainers:", error);
                        alert("Erro ao buscar os Personal Trainers. Tente novamente.");
                    });
            }

            function highlightSelectedCard(radio) {
                const cards = document.querySelectorAll('.personal-trainer-card');
                cards.forEach(card => {
                    card.style.border = '1px solid #ccc';
                });
                const selectedCard = radio.closest('.personal-trainer-card');
                selectedCard.style.border = '2px solid #007bff';
            }

            function updateSpaceDetails() {
                const spaceId = document.querySelector('#SpaceId').value;
                const date = document.querySelector('#ReservationDate').value;

                if (!spaceId || !date) {
                    document.getElementById('spaceDetails').style.display = 'none';
                    return;
                }

                fetch(`/Reserva/GetSpaceHours?spaceId=${spaceId}&date=${date}`)
                    .then(response => response.json())
                    .then(data => {
                        const spaceDetails = document.getElementById('spaceDetails');
                        const timeInputs = document.getElementById('timeInputs');
                        const spaceName = document.getElementById('spaceName');
                        const spaceHours = document.getElementById('spaceHours');

                        spaceName.innerText = data.spaceName;

                        if (data.isClosed) {
                            spaceHours.innerText = "Esse dia está fechado.";
                            timeInputs.style.display = 'none';
                        } else {
                            spaceHours.innerText = `${data.dayOfWeek}: ${data.openTime} - ${data.closeTime}`;
                            timeInputs.style.display = 'block';

                            const startTimePicker = document.getElementById('StartTime')._flatpickr;
                            const endTimePicker = document.getElementById('EndTime')._flatpickr;

                            startTimePicker.set('minTime', data.openTime);
                            startTimePicker.set('maxTime', data.closeTime);

                            endTimePicker.set('minTime', data.openTime);
                            endTimePicker.set('maxTime', data.closeTime);
                        }

                        spaceDetails.style.display = 'block';
                    })
                    .catch(error => {
                        console.error("Erro ao buscar os horários do espaço:", error);
                        alert("Erro ao buscar os horários do espaço. Tente novamente.");
                    });
            }
        </script>
    }
</div>
