@model TypeOfScheduleViewModel

@{
    ViewData["Title"] = "Index";
}

<h1>Type of Schedules</h1>

<div>
    <a asp-action="Create" class="btn btn-success">Create New</a>
    <button type="button" class="btn btn-secondary" data-bs-toggle="modal" data-bs-target="#searchModal">
        Search
    </button>
    @if (!string.IsNullOrEmpty(Model.SearchTypeOfScheduleName) || !string.IsNullOrEmpty(Model.SearchTypeOfScheduleDescription))
    {
        <a asp-action="Index" class="btn btn-outline-danger">Clear search</a>
    }
</div>

<!-- Search Modal -->
<div class="modal fade" id="searchModal" tabindex="-1" aria-labelledby="searchLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="searchLabel">Search Type of Schedule</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form asp-action="Index" method="get">
                <div class="modal-body">
                    <div class="form-group">
                        <label for="searchName" class="control-label">Type of Schedule Name</label>
                        <input name="searchTypeOfScheduleName" class="form-control" type="search" value="@Model.SearchTypeOfScheduleName" />
                    </div>
                    <div class="form-group">
                        <label for="searchDescription" class="control-label">Type of Schedule Description</label>
                        <input name="searchTypeOfScheduleDescription" class="form-control" type="search" value="@Model.SearchTypeOfScheduleDescription" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Search</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Show a message if no items are found after search -->
@if (!Model.TypeOfSchedules.Any() && (!string.IsNullOrEmpty(Model.SearchTypeOfScheduleName) || !string.IsNullOrEmpty(Model.SearchTypeOfScheduleDescription)))
{
    <div class="alert alert-info" role="alert">
        No Type of Schedules found matching your search criteria.
    </div>
}

<!-- Cards for Type of Schedules -->
@if (Model.TypeOfSchedules.Any())
{
    <div class="row">
        @foreach (var item in Model.TypeOfSchedules)
        {
            <div class="col-md-4 mb-4">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">@Html.DisplayFor(modelItem => item.TypeOfScheduleName)</h5>
                        <p class="card-text">@Html.DisplayFor(modelItem => item.TypeOfScheduleDescription)</p>
                        <a href="@Url.Action("Edit", "TypeOfSchedules", new { id = item.TypeOfScheduleId })" class="btn btn-warning">Edit</a>
                        <a href="@Url.Action("Details", "TypeOfSchedules", new { id = item.TypeOfScheduleId })" class="btn btn-info">Details</a>
                        <a href="@Url.Action("Delete", "TypeOfSchedules", new { id = item.TypeOfScheduleId })" class="btn btn-danger">Delete</a>
                    </div>
                </div>
            </div>
        }
    </div>
}
else if (string.IsNullOrEmpty(Model.SearchTypeOfScheduleName) && string.IsNullOrEmpty(Model.SearchTypeOfScheduleDescription))
{
    <!-- This will show only if there are no Type of Schedules and no search was applied -->
    <div class="alert alert-warning" role="alert">
        No Type of Schedules available to display.
    </div>
}

<!-- Pagination -->
<nav aria-label="TypeOfSchedulePagination">
    <ul class="pagination">
        @{
            var cssStyle = "page-item";
            if (Model.PagingInfo.CurrentPage == 1)
            {
                cssStyle += " disabled";
            }
        }
        <li class="@cssStyle">
            <a class="page-link"
               asp-action="Index"
               asp-route-page="1"
               asp-route-searchTypeOfScheduleName="@Model.SearchTypeOfScheduleName"
               asp-route-searchTypeOfScheduleDescription="@Model.SearchTypeOfScheduleDescription">First</a>
        </li>

        @for (int p = Model.PagingInfo.FirstPageShow; p <= Model.PagingInfo.LastPageShow; p++)
        {
            cssStyle = "page-item";
            if (p == Model.PagingInfo.CurrentPage)
            {
                cssStyle += " active";
            }

            <li class="@cssStyle">
                <a class="page-link"
                   asp-action="Index"
                   asp-route-page="@p"
                   asp-route-searchTypeOfScheduleName="@Model.SearchTypeOfScheduleName"
                   asp-route-searchTypeOfScheduleDescription="@Model.SearchTypeOfScheduleDescription">@p</a>
            </li>
        }

        @{
            cssStyle = "page-item";
            if (Model.PagingInfo.CurrentPage == Model.PagingInfo.TotalPages)
            {
                cssStyle += " disabled";
            }
        }
        <li class="@cssStyle">
            <a class="page-link"
               asp-action="Index"
               asp-route-page="@Model.PagingInfo.TotalPages"
               asp-route-searchTypeOfScheduleName="@Model.SearchTypeOfScheduleName"
               asp-route-searchTypeOfScheduleDescription="@Model.SearchTypeOfScheduleDescription">Last</a>
        </li>
    </ul>
</nav>
