// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ReserveSystem.Data;

#nullable disable

namespace ReserveSystem.Data.Migrations
{
    [DbContext(typeof(ReserveSystemUsersDbContext))]
    partial class ReserveSystemUsersDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            // IdentityRole Entity
            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
            {
                b.Property<string>("Id").HasColumnType("nvarchar(450)");
                b.Property<string>("ConcurrencyStamp").IsConcurrencyToken().HasColumnType("nvarchar(max)");
                b.Property<string>("Name").HasMaxLength(256).HasColumnType("nvarchar(256)");
                b.Property<string>("NormalizedName").HasMaxLength(256).HasColumnType("nvarchar(256)");
                b.HasKey("Id");
                b.HasIndex("NormalizedName").IsUnique().HasDatabaseName("RoleNameIndex").HasFilter("[NormalizedName] IS NOT NULL");
                b.ToTable("AspNetRoles");
            });

            // IdentityRoleClaim Entity
            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("int");
                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));
                b.Property<string>("ClaimType").HasColumnType("nvarchar(max)");
                b.Property<string>("ClaimValue").HasColumnType("nvarchar(max)");
                b.Property<string>("RoleId").IsRequired().HasColumnType("nvarchar(450)");
                b.HasKey("Id");
                b.HasIndex("RoleId");
                b.ToTable("AspNetRoleClaims");
            });

            // IdentityUser Entity
            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
            {
                b.Property<string>("Id").HasColumnType("nvarchar(450)");
                b.Property<int>("AccessFailedCount").HasColumnType("int");
                b.Property<string>("ConcurrencyStamp").IsConcurrencyToken().HasColumnType("nvarchar(max)");
                b.Property<string>("Email").HasMaxLength(256).HasColumnType("nvarchar(256)");
                b.Property<bool>("EmailConfirmed").HasColumnType("bit");
                b.Property<bool>("LockoutEnabled").HasColumnType("bit");
                b.Property<DateTimeOffset?>("LockoutEnd").HasColumnType("datetimeoffset");
                b.Property<string>("NormalizedEmail").HasMaxLength(256).HasColumnType("nvarchar(256)");
                b.Property<string>("NormalizedUserName").HasMaxLength(256).HasColumnType("nvarchar(256)");
                b.Property<string>("PasswordHash").HasColumnType("nvarchar(max)");
                b.Property<string>("PhoneNumber").HasColumnType("nvarchar(max)");
                b.Property<bool>("PhoneNumberConfirmed").HasColumnType("bit");
                b.Property<string>("SecurityStamp").HasColumnType("nvarchar(max)");
                b.Property<bool>("TwoFactorEnabled").HasColumnType("bit");
                b.Property<string>("UserName").HasMaxLength(256).HasColumnType("nvarchar(256)");
                b.HasKey("Id");
                b.HasIndex("NormalizedEmail").HasDatabaseName("EmailIndex");
                b.HasIndex("NormalizedUserName").IsUnique().HasDatabaseName("UserNameIndex").HasFilter("[NormalizedUserName] IS NOT NULL");
                b.ToTable("AspNetUsers");
            });

            // Custom Entities
            modelBuilder.Entity("ReserveSystem.Models.TQePreco", b =>
            {
                b.Property<int>("RoomTypeId").ValueGeneratedOnAdd().HasColumnType("int");
                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomTypeId"));
                b.Property<bool>("AcessibilityRoom").HasColumnType("bit");
                b.Property<float>("AdicionalBeds").HasColumnType("real");
                b.Property<int>("RoomQuantity").HasColumnType("int");
                b.Property<bool>("View").HasColumnType("bit");
                b.HasKey("RoomTypeId");
                b.ToTable("TQePreco");
            });

            modelBuilder.Entity("ReserveSystem.Models.Events", b =>
            {
                b.Property<int>("EventId").ValueGeneratedOnAdd().HasColumnType("int");
                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"));
                b.Property<string>("Name").IsRequired().HasMaxLength(100).HasColumnType("nvarchar(100)");
                b.Property<DateTime>("StartDate").HasColumnType("datetime2");
                b.Property<DateTime>("EndDate").HasColumnType("datetime2");
                b.Property<bool>("InUse").HasColumnType("bit");
                b.HasKey("EventId");
                b.ToTable("Events");
            });

            modelBuilder.Entity("ReserveSystem.Models.Sazonalidade", b =>
            {
                b.Property<int>("Id").ValueGeneratedOnAdd().HasColumnType("int");
                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));
                b.Property<string>("NameSeason").IsRequired().HasMaxLength(25).HasColumnType("nvarchar(25)");
                b.Property<DateTime>("DateBegin").HasColumnType("datetime2");
                b.Property<DateTime>("DateEnd").HasColumnType("datetime2");
                b.Property<float>("SeasonFee").HasColumnType("real");
                b.HasKey("Id");
                b.ToTable("Sazonalidade");
            });

            // Relationships
            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
            {
                b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                    .WithMany()
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
            {
                b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
            {
                b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
            {
                b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                    .WithMany()
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
            {
                b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });
#pragma warning restore 612, 618
        }
    }
}

