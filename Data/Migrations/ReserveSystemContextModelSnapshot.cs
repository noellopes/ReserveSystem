// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ReserveSystem.Data;

#nullable disable

namespace ReserveSystem.Migrations
{
    [DbContext(typeof(ReserveSystemContext))]
    partial class ReserveSystemContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ReserveSystem.Models.ClienteTestModel", b =>
                {
                    b.Property<int>("ClienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClienteId"));

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClienteId");

                    b.ToTable("ClienteTestModel");

                    b.HasData(
                        new
                        {
                            ClienteId = 21,
                            DataNascimento = new DateTime(1985, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "carlos.silva@email.com",
                            Nome = "Carlos Silva",
                            Telefone = "923412453"
                        },
                        new
                        {
                            ClienteId = 22,
                            DataNascimento = new DateTime(1990, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ana.oliveira@email.com",
                            Nome = "Ana Oliveira",
                            Telefone = "998765432"
                        },
                        new
                        {
                            ClienteId = 23,
                            DataNascimento = new DateTime(1982, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "joao.pereira@email.com",
                            Nome = "João Pereira",
                            Telefone = "987654321"
                        },
                        new
                        {
                            ClienteId = 24,
                            DataNascimento = new DateTime(1978, 11, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "maria.souza@email.com",
                            Nome = "Maria Souza",
                            Telefone = "996543210"
                        },
                        new
                        {
                            ClienteId = 25,
                            DataNascimento = new DateTime(1993, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "lucas.costa@email.com",
                            Nome = "Lucas Costa",
                            Telefone = "934567890"
                        },
                        new
                        {
                            ClienteId = 26,
                            DataNascimento = new DateTime(1989, 10, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "isabela.almeida@email.com",
                            Nome = "Isabela Almeida",
                            Telefone = "945678901"
                        },
                        new
                        {
                            ClienteId = 27,
                            DataNascimento = new DateTime(1995, 2, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "felipe.rocha@email.com",
                            Nome = "Felipe Rocha",
                            Telefone = "923456789"
                        },
                        new
                        {
                            ClienteId = 28,
                            DataNascimento = new DateTime(1983, 4, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "carla.martins@email.com",
                            Nome = "Carla Martins",
                            Telefone = "911223344"
                        },
                        new
                        {
                            ClienteId = 29,
                            DataNascimento = new DateTime(1990, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "fernando.gomes@email.com",
                            Nome = "Fernando Gomes",
                            Telefone = "997654321"
                        },
                        new
                        {
                            ClienteId = 30,
                            DataNascimento = new DateTime(1988, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "beatriz.santos@email.com",
                            Nome = "Beatriz Santos",
                            Telefone = "968754321"
                        },
                        new
                        {
                            ClienteId = 31,
                            DataNascimento = new DateTime(1992, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ricardo.ferreira@email.com",
                            Nome = "Ricardo Ferreira",
                            Telefone = "954321098"
                        },
                        new
                        {
                            ClienteId = 32,
                            DataNascimento = new DateTime(1994, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "juliana.silva@email.com",
                            Nome = "Juliana Silva",
                            Telefone = "924567890"
                        },
                        new
                        {
                            ClienteId = 33,
                            DataNascimento = new DateTime(1987, 5, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "gabriel.lima@email.com",
                            Nome = "Gabriel Lima",
                            Telefone = "917654321"
                        },
                        new
                        {
                            ClienteId = 34,
                            DataNascimento = new DateTime(1991, 11, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mariana.costa@email.com",
                            Nome = "Mariana Costa",
                            Telefone = "935678902"
                        },
                        new
                        {
                            ClienteId = 35,
                            DataNascimento = new DateTime(1980, 2, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "vitor.hugo@email.com",
                            Nome = "Vitor Hugo",
                            Telefone = "945678901"
                        },
                        new
                        {
                            ClienteId = 36,
                            DataNascimento = new DateTime(1994, 12, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "larissa.oliveira@email.com",
                            Nome = "Larissa Oliveira",
                            Telefone = "923456788"
                        },
                        new
                        {
                            ClienteId = 37,
                            DataNascimento = new DateTime(1993, 1, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "rafael.souza@email.com",
                            Nome = "Rafael Souza",
                            Telefone = "999887777"
                        },
                        new
                        {
                            ClienteId = 38,
                            DataNascimento = new DateTime(1986, 4, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "paula.dias@email.com",
                            Nome = "Paula Dias",
                            Telefone = "912345678"
                        },
                        new
                        {
                            ClienteId = 39,
                            DataNascimento = new DateTime(1992, 8, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "eduardo.rocha@email.com",
                            Nome = "Eduardo Rocha",
                            Telefone = "923456788"
                        },
                        new
                        {
                            ClienteId = 40,
                            DataNascimento = new DateTime(1984, 10, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tatiane.santos@email.com",
                            Nome = "Tatiane Santos",
                            Telefone = "943567890"
                        });
                });

            modelBuilder.Entity("ReserveSystem.Models.ExcursaoFavoritaModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<string>("Comentario")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ExcursaoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("ExcursaoId");

                    b.ToTable("ExcursaoFavoritaModel");

                    b.HasData(
                        new
                        {
                            Id = 71,
                            ClienteId = 30,
                            Comentario = "Passeio encantador, perfeito para relaxar.",
                            ExcursaoId = 1
                        },
                        new
                        {
                            Id = 72,
                            ClienteId = 21,
                            Comentario = "Guias excelentes e vistas incríveis!",
                            ExcursaoId = 2
                        },
                        new
                        {
                            Id = 73,
                            ClienteId = 22,
                            Comentario = "Muito divertido, meus filhos adoraram.",
                            ExcursaoId = 3
                        },
                        new
                        {
                            Id = 74,
                            ClienteId = 23,
                            Comentario = "O transporte poderia ser melhor, mas o local era incrível.",
                            ExcursaoId = 4
                        },
                        new
                        {
                            Id = 75,
                            ClienteId = 24,
                            Comentario = "Excelente organização e atenção aos detalhes.",
                            ExcursaoId = 5
                        },
                        new
                        {
                            Id = 76,
                            ClienteId = 25,
                            Comentario = "Lugar deslumbrante, recomendo para casais.",
                            ExcursaoId = 6
                        },
                        new
                        {
                            Id = 77,
                            ClienteId = 26,
                            Comentario = "Um pouco caro, mas valeu a pena.",
                            ExcursaoId = 7
                        },
                        new
                        {
                            Id = 78,
                            ClienteId = 27,
                            Comentario = "Paisagens de tirar o fôlego!",
                            ExcursaoId = 7
                        },
                        new
                        {
                            Id = 79,
                            ClienteId = 28,
                            Comentario = "Foi uma aventura inesquecível.",
                            ExcursaoId = 8
                        },
                        new
                        {
                            Id = 80,
                            ClienteId = 29,
                            Comentario = "Gostei da flexibilidade no roteiro.",
                            ExcursaoId = 9
                        },
                        new
                        {
                            Id = 81,
                            ClienteId = 30,
                            Comentario = "Bom para grupos grandes, bastante espaço.",
                            ExcursaoId = 10
                        },
                        new
                        {
                            Id = 82,
                            ClienteId = 31,
                            Comentario = "Adorei a comida servida durante o passeio.",
                            ExcursaoId = 11
                        },
                        new
                        {
                            Id = 83,
                            ClienteId = 32,
                            Comentario = "O tempo estava ótimo e tudo saiu como planejado.",
                            ExcursaoId = 12
                        },
                        new
                        {
                            Id = 84,
                            ClienteId = 33,
                            Comentario = "Poderiam ter mais informações sobre o local, mas gostei.",
                            ExcursaoId = 13
                        },
                        new
                        {
                            Id = 85,
                            ClienteId = 34,
                            Comentario = "O guia era muito simpático e experiente.",
                            ExcursaoId = 14
                        },
                        new
                        {
                            Id = 86,
                            ClienteId = 35,
                            Comentario = "Recomendo para quem gosta de aprender sobre história.",
                            ExcursaoId = 15
                        },
                        new
                        {
                            Id = 87,
                            ClienteId = 36,
                            Comentario = "Ótimo custo-benefício.",
                            ExcursaoId = 16
                        },
                        new
                        {
                            Id = 88,
                            ClienteId = 37,
                            Comentario = "Muito bem organizado e pontual.",
                            ExcursaoId = 17
                        },
                        new
                        {
                            Id = 89,
                            ClienteId = 38,
                            Comentario = "Lugar paradisíaco, voltarei com certeza!",
                            ExcursaoId = 18
                        },
                        new
                        {
                            Id = 90,
                            ClienteId = 39,
                            Comentario = "Fiquei encantado com o serviço personalizado.",
                            ExcursaoId = 19
                        });
                });

            modelBuilder.Entity("ReserveSystem.Models.ExcursaoModel", b =>
                {
                    b.Property<int>("ExcursaoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExcursaoId"));

                    b.Property<DateTime>("Data_Fim")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Data_Inicio")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Preco")
                        .HasColumnType("real");

                    b.Property<int>("StaffId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExcursaoId");

                    b.HasIndex("StaffId");

                    b.ToTable("ExcursaoModel");

                    b.HasData(
                        new
                        {
                            ExcursaoId = 1,
                            Data_Fim = new DateTime(2025, 1, 10, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            Data_Inicio = new DateTime(2025, 1, 10, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Descubra os principais pontos históricos de Lisboa.",
                            Preco = 50f,
                            StaffId = 1,
                            Titulo = "Tour Histórico de Lisboa"
                        },
                        new
                        {
                            ExcursaoId = 2,
                            Data_Fim = new DateTime(2025, 1, 12, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            Data_Inicio = new DateTime(2025, 1, 12, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Explore as melhores vinícolas da região do Douro.",
                            Preco = 75f,
                            StaffId = 2,
                            Titulo = "Rota dos Vinhos do Douro"
                        },
                        new
                        {
                            ExcursaoId = 3,
                            Data_Fim = new DateTime(2025, 1, 15, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            Data_Inicio = new DateTime(2025, 1, 15, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Aproveite uma trilha guiada na Serra da Estrela.",
                            Preco = 60f,
                            StaffId = 3,
                            Titulo = "Caminhada na Serra da Estrela"
                        },
                        new
                        {
                            ExcursaoId = 4,
                            Data_Fim = new DateTime(2025, 1, 18, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            Data_Inicio = new DateTime(2025, 1, 18, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Uma experiência relaxante navegando pelo Rio Tejo.",
                            Preco = 40f,
                            StaffId = 4,
                            Titulo = "Passeio de Barco no Rio Tejo"
                        },
                        new
                        {
                            ExcursaoId = 5,
                            Data_Fim = new DateTime(2025, 1, 20, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            Data_Inicio = new DateTime(2025, 1, 20, 9, 30, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Conheça a história do Mosteiro da Batalha.",
                            Preco = 35f,
                            StaffId = 5,
                            Titulo = "Visita ao Mosteiro da Batalha"
                        },
                        new
                        {
                            ExcursaoId = 6,
                            Data_Fim = new DateTime(2025, 1, 22, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            Data_Inicio = new DateTime(2025, 1, 22, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Uma excursão pelos monumentos históricos de Évora.",
                            Preco = 65f,
                            StaffId = 6,
                            Titulo = "Exploração de Évora"
                        },
                        new
                        {
                            ExcursaoId = 7,
                            Data_Fim = new DateTime(2025, 1, 25, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            Data_Inicio = new DateTime(2025, 1, 25, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Capture as vistas incríveis da Serra da Arrábida.",
                            Preco = 80f,
                            StaffId = 7,
                            Titulo = "Safari Fotográfico na Arrábida"
                        },
                        new
                        {
                            ExcursaoId = 8,
                            Data_Fim = new DateTime(2025, 1, 28, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            Data_Inicio = new DateTime(2025, 1, 28, 9, 30, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Explore os palácios e paisagens de Sintra.",
                            Preco = 70f,
                            StaffId = 8,
                            Titulo = "Passeio Cultural em Sintra"
                        },
                        new
                        {
                            ExcursaoId = 9,
                            Data_Fim = new DateTime(2025, 1, 30, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            Data_Inicio = new DateTime(2025, 1, 30, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Descubra a culinária local do Porto.",
                            Preco = 50f,
                            StaffId = 9,
                            Titulo = "Tour Gastronômico em Porto"
                        },
                        new
                        {
                            ExcursaoId = 10,
                            Data_Fim = new DateTime(2025, 2, 2, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            Data_Inicio = new DateTime(2025, 2, 2, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Um passeio pelas águas e ilhas da Ria Formosa.",
                            Preco = 60f,
                            StaffId = 10,
                            Titulo = "Exploração da Ria Formosa"
                        },
                        new
                        {
                            ExcursaoId = 11,
                            Data_Fim = new DateTime(2025, 2, 5, 23, 0, 0, 0, DateTimeKind.Unspecified),
                            Data_Inicio = new DateTime(2025, 2, 5, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Descubra a magia de Lisboa à noite.",
                            Preco = 45f,
                            StaffId = 11,
                            Titulo = "Tour Noturno em Lisboa"
                        },
                        new
                        {
                            ExcursaoId = 12,
                            Data_Fim = new DateTime(2025, 2, 7, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            Data_Inicio = new DateTime(2025, 2, 7, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Visite as Grutas de Mira de Aire e suas formações únicas.",
                            Preco = 30f,
                            StaffId = 12,
                            Titulo = "Exploração Subterrânea em Mira de Aire"
                        },
                        new
                        {
                            ExcursaoId = 13,
                            Data_Fim = new DateTime(2025, 2, 10, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            Data_Inicio = new DateTime(2025, 2, 10, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Explore a natureza e a beleza do Parque Nacional Peneda-Gerês.",
                            Preco = 85f,
                            StaffId = 13,
                            Titulo = "Aventura em Peneda-Gerês"
                        },
                        new
                        {
                            ExcursaoId = 14,
                            Data_Fim = new DateTime(2025, 2, 12, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            Data_Inicio = new DateTime(2025, 2, 12, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Conheça as aldeias encantadoras e cheias de história.",
                            Preco = 95f,
                            StaffId = 14,
                            Titulo = "Passeio pelas Aldeias Históricas de Portugal"
                        },
                        new
                        {
                            ExcursaoId = 15,
                            Data_Fim = new DateTime(2025, 2, 15, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            Data_Inicio = new DateTime(2025, 2, 15, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Um passeio inesquecível pelo Rio Douro.",
                            Preco = 55f,
                            StaffId = 15,
                            Titulo = "Cruzeiro no Rio Douro"
                        },
                        new
                        {
                            ExcursaoId = 16,
                            Data_Fim = new DateTime(2025, 2, 18, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            Data_Inicio = new DateTime(2025, 2, 18, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Descubra o Alentejo sobre duas rodas.",
                            Preco = 40f,
                            StaffId = 16,
                            Titulo = "Passeio de Bicicleta no Alentejo"
                        },
                        new
                        {
                            ExcursaoId = 17,
                            Data_Fim = new DateTime(2025, 2, 20, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Data_Inicio = new DateTime(2025, 2, 20, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Siga os passos do grande poeta em Lisboa.",
                            Preco = 25f,
                            StaffId = 17,
                            Titulo = "Roteiro Literário de Fernando Pessoa"
                        },
                        new
                        {
                            ExcursaoId = 18,
                            Data_Fim = new DateTime(2025, 2, 23, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            Data_Inicio = new DateTime(2025, 2, 23, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Uma jornada pelos castelos mais icônicos do país.",
                            Preco = 70f,
                            StaffId = 18,
                            Titulo = "Passeio pelos Castelos de Portugal"
                        },
                        new
                        {
                            ExcursaoId = 19,
                            Data_Fim = new DateTime(2025, 2, 25, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            Data_Inicio = new DateTime(2025, 2, 25, 9, 30, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Viva uma experiência única no Algarve.",
                            Preco = 50f,
                            StaffId = 19,
                            Titulo = "Observação de Golfinhos no Algarve"
                        },
                        new
                        {
                            ExcursaoId = 20,
                            Data_Fim = new DateTime(2025, 2, 27, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            Data_Inicio = new DateTime(2025, 2, 27, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Descubra a vibrante arte de rua de Lisboa.",
                            Preco = 35f,
                            StaffId = 20,
                            Titulo = "Tour de Arte Urbana em Lisboa"
                        },
                        new
                        {
                            ExcursaoId = 21,
                            Data_Fim = new DateTime(2025, 3, 1, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            Data_Inicio = new DateTime(2025, 3, 1, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Encante-se com as paisagens da amendoeira em flor.",
                            Preco = 75f,
                            StaffId = 21,
                            Titulo = "Rota da Amendoeira em Flor"
                        },
                        new
                        {
                            ExcursaoId = 22,
                            Data_Fim = new DateTime(2025, 3, 3, 18, 30, 0, 0, DateTimeKind.Unspecified),
                            Data_Inicio = new DateTime(2025, 3, 3, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Relaxe nas praias deslumbrantes do Alentejo.",
                            Preco = 65f,
                            StaffId = 22,
                            Titulo = "Passeio pelas Praias do Alentejo"
                        },
                        new
                        {
                            ExcursaoId = 23,
                            Data_Fim = new DateTime(2025, 3, 5, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            Data_Inicio = new DateTime(2025, 3, 5, 9, 30, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Explore a rica história e cultura de Coimbra.",
                            Preco = 40f,
                            StaffId = 23,
                            Titulo = "Tour Histórico em Coimbra"
                        },
                        new
                        {
                            ExcursaoId = 24,
                            Data_Fim = new DateTime(2025, 3, 7, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            Data_Inicio = new DateTime(2025, 3, 7, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Uma experiência nas furnas vulcânicas de São Miguel.",
                            Preco = 50f,
                            StaffId = 24,
                            Titulo = "Visita às Furnas de São Miguel"
                        },
                        new
                        {
                            ExcursaoId = 25,
                            Data_Fim = new DateTime(2025, 3, 10, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            Data_Inicio = new DateTime(2025, 3, 10, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Uma excursão marítima inesquecível nas Berlengas.",
                            Preco = 80f,
                            StaffId = 25,
                            Titulo = "Jornada pelas Ilhas Berlengas"
                        });
                });

            modelBuilder.Entity("ReserveSystem.Models.MotoristaTransporte", b =>
                {
                    b.Property<int>("MotoristaTransporteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MotoristaTransporteId"));

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<int>("TransporteId")
                        .HasColumnType("int");

                    b.HasKey("MotoristaTransporteId");

                    b.HasIndex("StaffId");

                    b.HasIndex("TransporteId");

                    b.ToTable("MotoristaTransporte");

                    b.HasData(
                        new
                        {
                            MotoristaTransporteId = 26,
                            StaffId = 2,
                            TransporteId = 26
                        },
                        new
                        {
                            MotoristaTransporteId = 27,
                            StaffId = 1,
                            TransporteId = 27
                        },
                        new
                        {
                            MotoristaTransporteId = 28,
                            StaffId = 3,
                            TransporteId = 28
                        },
                        new
                        {
                            MotoristaTransporteId = 29,
                            StaffId = 4,
                            TransporteId = 29
                        },
                        new
                        {
                            MotoristaTransporteId = 30,
                            StaffId = 5,
                            TransporteId = 30
                        },
                        new
                        {
                            MotoristaTransporteId = 31,
                            StaffId = 6,
                            TransporteId = 31
                        },
                        new
                        {
                            MotoristaTransporteId = 32,
                            StaffId = 7,
                            TransporteId = 32
                        },
                        new
                        {
                            MotoristaTransporteId = 33,
                            StaffId = 8,
                            TransporteId = 33
                        },
                        new
                        {
                            MotoristaTransporteId = 34,
                            StaffId = 9,
                            TransporteId = 34
                        },
                        new
                        {
                            MotoristaTransporteId = 35,
                            StaffId = 10,
                            TransporteId = 35
                        },
                        new
                        {
                            MotoristaTransporteId = 36,
                            StaffId = 11,
                            TransporteId = 36
                        },
                        new
                        {
                            MotoristaTransporteId = 37,
                            StaffId = 12,
                            TransporteId = 37
                        },
                        new
                        {
                            MotoristaTransporteId = 38,
                            StaffId = 13,
                            TransporteId = 38
                        },
                        new
                        {
                            MotoristaTransporteId = 39,
                            StaffId = 14,
                            TransporteId = 39
                        },
                        new
                        {
                            MotoristaTransporteId = 40,
                            StaffId = 15,
                            TransporteId = 40
                        },
                        new
                        {
                            MotoristaTransporteId = 41,
                            StaffId = 16,
                            TransporteId = 41
                        },
                        new
                        {
                            MotoristaTransporteId = 42,
                            StaffId = 17,
                            TransporteId = 42
                        },
                        new
                        {
                            MotoristaTransporteId = 43,
                            StaffId = 18,
                            TransporteId = 43
                        },
                        new
                        {
                            MotoristaTransporteId = 44,
                            StaffId = 19,
                            TransporteId = 44
                        },
                        new
                        {
                            MotoristaTransporteId = 45,
                            StaffId = 20,
                            TransporteId = 45
                        },
                        new
                        {
                            MotoristaTransporteId = 46,
                            StaffId = 21,
                            TransporteId = 46
                        },
                        new
                        {
                            MotoristaTransporteId = 47,
                            StaffId = 22,
                            TransporteId = 47
                        },
                        new
                        {
                            MotoristaTransporteId = 48,
                            StaffId = 23,
                            TransporteId = 48
                        },
                        new
                        {
                            MotoristaTransporteId = 49,
                            StaffId = 24,
                            TransporteId = 49
                        },
                        new
                        {
                            MotoristaTransporteId = 50,
                            StaffId = 25,
                            TransporteId = 50
                        });
                });

            modelBuilder.Entity("ReserveSystem.Models.PrecarioModel", b =>
                {
                    b.Property<int>("PrecoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrecoId"));

                    b.Property<DateTime>("Data_Inicio")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExcursaoId")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Preco")
                        .HasColumnType("real");

                    b.HasKey("PrecoId");

                    b.HasIndex("ExcursaoId");

                    b.ToTable("PrecarioModel");
                });

            modelBuilder.Entity("ReserveSystem.Models.ReservaExcursaoModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataReserva")
                        .HasColumnType("DATETIME");

                    b.Property<int>("ExcursaoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumPessoas")
                        .HasColumnType("int");

                    b.Property<float>("ValorTotal")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("ExcursaoId");

                    b.ToTable("ReservaExcursaoModel");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClienteId = 21,
                            DataReserva = new DateTime(2024, 12, 10, 23, 2, 48, 265, DateTimeKind.Local).AddTicks(5077),
                            ExcursaoId = 1,
                            NumPessoas = 4,
                            ValorTotal = 200f
                        },
                        new
                        {
                            Id = 2,
                            ClienteId = 22,
                            DataReserva = new DateTime(2024, 12, 15, 23, 2, 48, 265, DateTimeKind.Local).AddTicks(5147),
                            ExcursaoId = 2,
                            NumPessoas = 2,
                            ValorTotal = 100f
                        },
                        new
                        {
                            Id = 3,
                            ClienteId = 23,
                            DataReserva = new DateTime(2024, 12, 20, 23, 2, 48, 265, DateTimeKind.Local).AddTicks(5149),
                            ExcursaoId = 3,
                            NumPessoas = 5,
                            ValorTotal = 250f
                        },
                        new
                        {
                            Id = 4,
                            ClienteId = 24,
                            DataReserva = new DateTime(2024, 12, 22, 23, 2, 48, 265, DateTimeKind.Local).AddTicks(5151),
                            ExcursaoId = 4,
                            NumPessoas = 3,
                            ValorTotal = 150f
                        },
                        new
                        {
                            Id = 5,
                            ClienteId = 25,
                            DataReserva = new DateTime(2024, 12, 25, 23, 2, 48, 265, DateTimeKind.Local).AddTicks(5152),
                            ExcursaoId = 5,
                            NumPessoas = 1,
                            ValorTotal = 50f
                        },
                        new
                        {
                            Id = 6,
                            ClienteId = 26,
                            DataReserva = new DateTime(2024, 12, 26, 23, 2, 48, 265, DateTimeKind.Local).AddTicks(5154),
                            ExcursaoId = 6,
                            NumPessoas = 2,
                            ValorTotal = 100f
                        },
                        new
                        {
                            Id = 7,
                            ClienteId = 27,
                            DataReserva = new DateTime(2024, 12, 28, 23, 2, 48, 265, DateTimeKind.Local).AddTicks(5157),
                            ExcursaoId = 7,
                            NumPessoas = 4,
                            ValorTotal = 200f
                        },
                        new
                        {
                            Id = 8,
                            ClienteId = 28,
                            DataReserva = new DateTime(2024, 12, 30, 23, 2, 48, 265, DateTimeKind.Local).AddTicks(5159),
                            ExcursaoId = 8,
                            NumPessoas = 3,
                            ValorTotal = 150f
                        },
                        new
                        {
                            Id = 9,
                            ClienteId = 29,
                            DataReserva = new DateTime(2025, 1, 1, 23, 2, 48, 265, DateTimeKind.Local).AddTicks(5161),
                            ExcursaoId = 9,
                            NumPessoas = 5,
                            ValorTotal = 250f
                        },
                        new
                        {
                            Id = 10,
                            ClienteId = 30,
                            DataReserva = new DateTime(2025, 1, 3, 23, 2, 48, 265, DateTimeKind.Local).AddTicks(5190),
                            ExcursaoId = 10,
                            NumPessoas = 2,
                            ValorTotal = 100f
                        },
                        new
                        {
                            Id = 11,
                            ClienteId = 31,
                            DataReserva = new DateTime(2025, 1, 4, 23, 2, 48, 265, DateTimeKind.Local).AddTicks(5192),
                            ExcursaoId = 11,
                            NumPessoas = 4,
                            ValorTotal = 200f
                        },
                        new
                        {
                            Id = 12,
                            ClienteId = 32,
                            DataReserva = new DateTime(2025, 1, 5, 23, 2, 48, 265, DateTimeKind.Local).AddTicks(5194),
                            ExcursaoId = 12,
                            NumPessoas = 3,
                            ValorTotal = 150f
                        },
                        new
                        {
                            Id = 13,
                            ClienteId = 33,
                            DataReserva = new DateTime(2025, 1, 6, 23, 2, 48, 265, DateTimeKind.Local).AddTicks(5195),
                            ExcursaoId = 13,
                            NumPessoas = 5,
                            ValorTotal = 250f
                        },
                        new
                        {
                            Id = 14,
                            ClienteId = 34,
                            DataReserva = new DateTime(2025, 1, 7, 23, 2, 48, 265, DateTimeKind.Local).AddTicks(5197),
                            ExcursaoId = 14,
                            NumPessoas = 2,
                            ValorTotal = 100f
                        },
                        new
                        {
                            Id = 15,
                            ClienteId = 35,
                            DataReserva = new DateTime(2025, 1, 8, 23, 2, 48, 265, DateTimeKind.Local).AddTicks(5198),
                            ExcursaoId = 15,
                            NumPessoas = 1,
                            ValorTotal = 50f
                        },
                        new
                        {
                            Id = 16,
                            ClienteId = 36,
                            DataReserva = new DateTime(2025, 1, 9, 23, 2, 48, 265, DateTimeKind.Local).AddTicks(5200),
                            ExcursaoId = 16,
                            NumPessoas = 3,
                            ValorTotal = 150f
                        },
                        new
                        {
                            Id = 17,
                            ClienteId = 37,
                            DataReserva = new DateTime(2025, 1, 10, 23, 2, 48, 265, DateTimeKind.Local).AddTicks(5202),
                            ExcursaoId = 17,
                            NumPessoas = 4,
                            ValorTotal = 200f
                        },
                        new
                        {
                            Id = 18,
                            ClienteId = 38,
                            DataReserva = new DateTime(2025, 1, 11, 23, 2, 48, 265, DateTimeKind.Local).AddTicks(5203),
                            ExcursaoId = 18,
                            NumPessoas = 2,
                            ValorTotal = 100f
                        },
                        new
                        {
                            Id = 19,
                            ClienteId = 39,
                            DataReserva = new DateTime(2025, 1, 12, 23, 2, 48, 265, DateTimeKind.Local).AddTicks(5205),
                            ExcursaoId = 19,
                            NumPessoas = 5,
                            ValorTotal = 250f
                        },
                        new
                        {
                            Id = 20,
                            ClienteId = 40,
                            DataReserva = new DateTime(2025, 1, 13, 23, 2, 48, 265, DateTimeKind.Local).AddTicks(5207),
                            ExcursaoId = 20,
                            NumPessoas = 4,
                            ValorTotal = 200f
                        },
                        new
                        {
                            Id = 21,
                            ClienteId = 21,
                            DataReserva = new DateTime(2025, 1, 14, 23, 2, 48, 265, DateTimeKind.Local).AddTicks(5208),
                            ExcursaoId = 21,
                            NumPessoas = 3,
                            ValorTotal = 150f
                        },
                        new
                        {
                            Id = 22,
                            ClienteId = 22,
                            DataReserva = new DateTime(2025, 1, 15, 23, 2, 48, 265, DateTimeKind.Local).AddTicks(5210),
                            ExcursaoId = 22,
                            NumPessoas = 2,
                            ValorTotal = 100f
                        },
                        new
                        {
                            Id = 23,
                            ClienteId = 23,
                            DataReserva = new DateTime(2025, 1, 16, 23, 2, 48, 265, DateTimeKind.Local).AddTicks(5211),
                            ExcursaoId = 23,
                            NumPessoas = 4,
                            ValorTotal = 200f
                        },
                        new
                        {
                            Id = 24,
                            ClienteId = 24,
                            DataReserva = new DateTime(2025, 1, 17, 23, 2, 48, 265, DateTimeKind.Local).AddTicks(5214),
                            ExcursaoId = 24,
                            NumPessoas = 5,
                            ValorTotal = 250f
                        },
                        new
                        {
                            Id = 25,
                            ClienteId = 25,
                            DataReserva = new DateTime(2025, 1, 18, 23, 2, 48, 265, DateTimeKind.Local).AddTicks(5216),
                            ExcursaoId = 25,
                            NumPessoas = 1,
                            ValorTotal = 50f
                        });
                });

            modelBuilder.Entity("ReserveSystem.Models.StaffModel", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffId"));

                    b.Property<string>("Job_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Staff_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoCarta")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StaffId");

                    b.ToTable("StaffModel");

                    b.HasData(
                        new
                        {
                            StaffId = 1,
                            Job_Name = "Motorista",
                            Staff_Name = "João Silva",
                            TipoCarta = "C"
                        },
                        new
                        {
                            StaffId = 2,
                            Job_Name = "Guia Turístico",
                            Staff_Name = "Maria Ferreira"
                        },
                        new
                        {
                            StaffId = 3,
                            Job_Name = "Motorista",
                            Staff_Name = "Carlos Mendes",
                            TipoCarta = "D"
                        },
                        new
                        {
                            StaffId = 4,
                            Job_Name = "Gestor de Excursão",
                            Staff_Name = "Ana Costa"
                        },
                        new
                        {
                            StaffId = 5,
                            Job_Name = "Motorista",
                            Staff_Name = "Luís Pereira",
                            TipoCarta = "C+E"
                        },
                        new
                        {
                            StaffId = 6,
                            Job_Name = "Guia Turístico",
                            Staff_Name = "Rita Oliveira"
                        },
                        new
                        {
                            StaffId = 7,
                            Job_Name = "Motorista",
                            Staff_Name = "Pedro Santos",
                            TipoCarta = "B"
                        },
                        new
                        {
                            StaffId = 8,
                            Job_Name = "Gestor de Excursão",
                            Staff_Name = "Marta Lopes"
                        },
                        new
                        {
                            StaffId = 9,
                            Job_Name = "Motorista",
                            Staff_Name = "Fernando Gomes",
                            TipoCarta = "D+E"
                        },
                        new
                        {
                            StaffId = 10,
                            Job_Name = "Guia Turístico",
                            Staff_Name = "Cláudia Neves"
                        },
                        new
                        {
                            StaffId = 11,
                            Job_Name = "Motorista",
                            Staff_Name = "António Silva",
                            TipoCarta = "C"
                        },
                        new
                        {
                            StaffId = 12,
                            Job_Name = "Gestor de Excursão",
                            Staff_Name = "Beatriz Sousa"
                        },
                        new
                        {
                            StaffId = 13,
                            Job_Name = "Motorista",
                            Staff_Name = "Ricardo Teixeira",
                            TipoCarta = "D"
                        },
                        new
                        {
                            StaffId = 14,
                            Job_Name = "Guia Turístico",
                            Staff_Name = "Joana Martins"
                        },
                        new
                        {
                            StaffId = 15,
                            Job_Name = "Motorista",
                            Staff_Name = "Tiago Rocha",
                            TipoCarta = "C+E"
                        },
                        new
                        {
                            StaffId = 16,
                            Job_Name = "Gestor de Excursão",
                            Staff_Name = "Helena Ribeiro"
                        },
                        new
                        {
                            StaffId = 17,
                            Job_Name = "Motorista",
                            Staff_Name = "José Almeida",
                            TipoCarta = "B"
                        },
                        new
                        {
                            StaffId = 18,
                            Job_Name = "Guia Turístico",
                            Staff_Name = "Sofia Silva"
                        },
                        new
                        {
                            StaffId = 19,
                            Job_Name = "Motorista",
                            Staff_Name = "Vítor Pinto",
                            TipoCarta = "C"
                        },
                        new
                        {
                            StaffId = 20,
                            Job_Name = "Gestor de Excursão",
                            Staff_Name = "Catarina Azevedo"
                        },
                        new
                        {
                            StaffId = 21,
                            Job_Name = "Motorista",
                            Staff_Name = "André Matos",
                            TipoCarta = "D+E"
                        },
                        new
                        {
                            StaffId = 22,
                            Job_Name = "Guia Turístico",
                            Staff_Name = "Patrícia Lima"
                        },
                        new
                        {
                            StaffId = 23,
                            Job_Name = "Motorista",
                            Staff_Name = "Eduardo Nunes",
                            TipoCarta = "B"
                        },
                        new
                        {
                            StaffId = 24,
                            Job_Name = "Gestor de Excursão",
                            Staff_Name = "Carla Moreira"
                        },
                        new
                        {
                            StaffId = 25,
                            Job_Name = "Motorista",
                            Staff_Name = "Bruno Tavares",
                            TipoCarta = "C"
                        });
                });

            modelBuilder.Entity("ReserveSystem.Models.Transporte", b =>
                {
                    b.Property<int>("TransporteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransporteId"));

                    b.Property<int>("AnoFabricacao")
                        .HasColumnType("int");

                    b.Property<int>("Capacidade")
                        .HasColumnType("int");

                    b.Property<string>("CartaTransporte")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescricaoTipoTransporte")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Matricula")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("TipoTransporte")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TransporteId");

                    b.ToTable("Transporte");

                    b.HasData(
                        new
                        {
                            TransporteId = 26,
                            AnoFabricacao = 2015,
                            Capacidade = 55,
                            CartaTransporte = "D",
                            DescricaoTipoTransporte = "Autocarro confortável para turismo de longa distância",
                            Matricula = "AA-1234",
                            TipoTransporte = "Autocarro"
                        },
                        new
                        {
                            TransporteId = 27,
                            AnoFabricacao = 2019,
                            Capacidade = 20,
                            CartaTransporte = "D",
                            DescricaoTipoTransporte = "Minibus ideal para grupos pequenos em excursões",
                            Matricula = "BB-5678",
                            TipoTransporte = "Minibus"
                        },
                        new
                        {
                            TransporteId = 28,
                            AnoFabricacao = 2021,
                            Capacidade = 12,
                            CartaTransporte = "C",
                            DescricaoTipoTransporte = "Van moderna para transporte rápido de passageiros",
                            Matricula = "CC-9101",
                            TipoTransporte = "Van"
                        },
                        new
                        {
                            TransporteId = 29,
                            AnoFabricacao = 2016,
                            Capacidade = 45,
                            CartaTransporte = "D",
                            DescricaoTipoTransporte = "Autocarro com ar condicionado e Wi-Fi",
                            Matricula = "DD-1122",
                            TipoTransporte = "Autocarro"
                        },
                        new
                        {
                            TransporteId = 30,
                            AnoFabricacao = 2020,
                            Capacidade = 18,
                            CartaTransporte = "C",
                            DescricaoTipoTransporte = "Van prática para transporte urbano",
                            Matricula = "EE-3344",
                            TipoTransporte = "Van"
                        },
                        new
                        {
                            TransporteId = 31,
                            AnoFabricacao = 2017,
                            Capacidade = 35,
                            CartaTransporte = "D",
                            DescricaoTipoTransporte = "Minibus económico com espaço para bagagens",
                            Matricula = "FF-5566",
                            TipoTransporte = "Minibus"
                        },
                        new
                        {
                            TransporteId = 32,
                            AnoFabricacao = 2013,
                            Capacidade = 60,
                            CartaTransporte = "D",
                            DescricaoTipoTransporte = "Autocarro de grande capacidade para excursões escolares",
                            Matricula = "GG-7788",
                            TipoTransporte = "Autocarro"
                        },
                        new
                        {
                            TransporteId = 33,
                            AnoFabricacao = 2022,
                            Capacidade = 14,
                            CartaTransporte = "B",
                            DescricaoTipoTransporte = "Van recente e equipada para transporte eficiente",
                            Matricula = "HH-9900",
                            TipoTransporte = "Van"
                        },
                        new
                        {
                            TransporteId = 34,
                            AnoFabricacao = 2014,
                            Capacidade = 50,
                            CartaTransporte = "D",
                            DescricaoTipoTransporte = "Autocarro clássico para transporte turístico",
                            Matricula = "II-2233",
                            TipoTransporte = "Autocarro"
                        },
                        new
                        {
                            TransporteId = 35,
                            AnoFabricacao = 2018,
                            Capacidade = 22,
                            CartaTransporte = "D",
                            DescricaoTipoTransporte = "Minibus compacto para serviços personalizados",
                            Matricula = "JJ-4455",
                            TipoTransporte = "Minibus"
                        },
                        new
                        {
                            TransporteId = 36,
                            AnoFabricacao = 2015,
                            Capacidade = 55,
                            CartaTransporte = "D",
                            DescricaoTipoTransporte = "Autocarro espaçoso para grandes eventos",
                            Matricula = "KK-6677",
                            TipoTransporte = "Autocarro"
                        },
                        new
                        {
                            TransporteId = 37,
                            AnoFabricacao = 2021,
                            Capacidade = 10,
                            CartaTransporte = "B",
                            DescricaoTipoTransporte = "Van ágil para serviços de transporte rápidos",
                            Matricula = "LL-8899",
                            TipoTransporte = "Van"
                        },
                        new
                        {
                            TransporteId = 38,
                            AnoFabricacao = 2017,
                            Capacidade = 48,
                            CartaTransporte = "D",
                            DescricaoTipoTransporte = "Autocarro ideal para rotas intermunicipais",
                            Matricula = "MM-0011",
                            TipoTransporte = "Autocarro"
                        },
                        new
                        {
                            TransporteId = 39,
                            AnoFabricacao = 2019,
                            Capacidade = 28,
                            CartaTransporte = "D",
                            DescricaoTipoTransporte = "Minibus com sistema de climatização",
                            Matricula = "NN-1123",
                            TipoTransporte = "Minibus"
                        },
                        new
                        {
                            TransporteId = 40,
                            AnoFabricacao = 2016,
                            Capacidade = 40,
                            CartaTransporte = "D",
                            DescricaoTipoTransporte = "Autocarro para transporte corporativo",
                            Matricula = "OO-4456",
                            TipoTransporte = "Autocarro"
                        },
                        new
                        {
                            TransporteId = 41,
                            AnoFabricacao = 2020,
                            Capacidade = 16,
                            CartaTransporte = "C",
                            DescricaoTipoTransporte = "Van prática para pequenas viagens",
                            Matricula = "PP-7789",
                            TipoTransporte = "Van"
                        },
                        new
                        {
                            TransporteId = 42,
                            AnoFabricacao = 2015,
                            Capacidade = 35,
                            CartaTransporte = "D",
                            DescricaoTipoTransporte = "Minibus económico com bancos confortáveis",
                            Matricula = "QQ-9901",
                            TipoTransporte = "Minibus"
                        },
                        new
                        {
                            TransporteId = 43,
                            AnoFabricacao = 2013,
                            Capacidade = 60,
                            CartaTransporte = "D",
                            DescricaoTipoTransporte = "Autocarro com assentos reclináveis",
                            Matricula = "RR-2234",
                            TipoTransporte = "Autocarro"
                        },
                        new
                        {
                            TransporteId = 44,
                            AnoFabricacao = 2022,
                            Capacidade = 12,
                            CartaTransporte = "B",
                            DescricaoTipoTransporte = "Van eficiente para transporte diário",
                            Matricula = "SS-5567",
                            TipoTransporte = "Van"
                        },
                        new
                        {
                            TransporteId = 45,
                            AnoFabricacao = 2021,
                            Capacidade = 25,
                            CartaTransporte = "D",
                            DescricaoTipoTransporte = "Minibus recente para excursões de lazer",
                            Matricula = "TT-7789",
                            TipoTransporte = "Minibus"
                        },
                        new
                        {
                            TransporteId = 46,
                            AnoFabricacao = 2016,
                            Capacidade = 45,
                            CartaTransporte = "D",
                            DescricaoTipoTransporte = "Autocarro equipado com Wi-Fi",
                            Matricula = "UU-9902",
                            TipoTransporte = "Autocarro"
                        },
                        new
                        {
                            TransporteId = 47,
                            AnoFabricacao = 2020,
                            Capacidade = 18,
                            CartaTransporte = "C",
                            DescricaoTipoTransporte = "Van espaçosa para famílias",
                            Matricula = "VV-2235",
                            TipoTransporte = "Van"
                        },
                        new
                        {
                            TransporteId = 48,
                            AnoFabricacao = 2014,
                            Capacidade = 50,
                            CartaTransporte = "D",
                            DescricaoTipoTransporte = "Autocarro ideal para viagens de longa distância",
                            Matricula = "WW-4457",
                            TipoTransporte = "Autocarro"
                        },
                        new
                        {
                            TransporteId = 49,
                            AnoFabricacao = 2018,
                            Capacidade = 30,
                            CartaTransporte = "D",
                            DescricaoTipoTransporte = "Minibus para transporte escolar",
                            Matricula = "XX-6678",
                            TipoTransporte = "Minibus"
                        },
                        new
                        {
                            TransporteId = 50,
                            AnoFabricacao = 2021,
                            Capacidade = 14,
                            CartaTransporte = "B",
                            DescricaoTipoTransporte = "Van para serviços de transporte rápidos e eficientes",
                            Matricula = "YY-8890",
                            TipoTransporte = "Van"
                        });
                });

            modelBuilder.Entity("ReserveSystem.Models.ExcursaoFavoritaModel", b =>
                {
                    b.HasOne("ReserveSystem.Models.ClienteTestModel", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReserveSystem.Models.ExcursaoModel", "Excursao")
                        .WithMany()
                        .HasForeignKey("ExcursaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Excursao");
                });

            modelBuilder.Entity("ReserveSystem.Models.ExcursaoModel", b =>
                {
                    b.HasOne("ReserveSystem.Models.StaffModel", "Staff")
                        .WithMany("Excursao")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("ReserveSystem.Models.MotoristaTransporte", b =>
                {
                    b.HasOne("ReserveSystem.Models.StaffModel", "Staff")
                        .WithMany("MotoristaTransporte")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReserveSystem.Models.Transporte", "Transporte")
                        .WithMany("MotoristaTransporte")
                        .HasForeignKey("TransporteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staff");

                    b.Navigation("Transporte");
                });

            modelBuilder.Entity("ReserveSystem.Models.PrecarioModel", b =>
                {
                    b.HasOne("ReserveSystem.Models.ExcursaoModel", "Excursao")
                        .WithMany("Precario")
                        .HasForeignKey("ExcursaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Excursao");
                });

            modelBuilder.Entity("ReserveSystem.Models.ReservaExcursaoModel", b =>
                {
                    b.HasOne("ReserveSystem.Models.ClienteTestModel", "Cliente")
                        .WithMany("ReservaExcursoes")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReserveSystem.Models.ExcursaoModel", "Excursao")
                        .WithMany("ReservaExcursoes")
                        .HasForeignKey("ExcursaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Excursao");
                });

            modelBuilder.Entity("ReserveSystem.Models.ClienteTestModel", b =>
                {
                    b.Navigation("ReservaExcursoes");
                });

            modelBuilder.Entity("ReserveSystem.Models.ExcursaoModel", b =>
                {
                    b.Navigation("Precario");

                    b.Navigation("ReservaExcursoes");
                });

            modelBuilder.Entity("ReserveSystem.Models.StaffModel", b =>
                {
                    b.Navigation("Excursao");

                    b.Navigation("MotoristaTransporte");
                });

            modelBuilder.Entity("ReserveSystem.Models.Transporte", b =>
                {
                    b.Navigation("MotoristaTransporte");
                });
#pragma warning restore 612, 618
        }
    }
}
